{"version":3,"sources":["store/constants.js","components/elements/defaultLoading/defaultLoading.jsx","store/actions.js","components/images/home/loading.gif","components/routes/billing/index.jsx","home.js","store/reducers.js","store/index.js","store/storeProvider.js","App.js","serviceWorker.js","index.js"],"names":["constants","UPDATE_CONFIG_INFO","UPDATE_USER_AUTH_DATA","DefaultLoading","react__WEBPACK_IMPORTED_MODULE_5___default","a","createElement","src","loading_icon","className","alt","Component","__webpack_require__","d","__webpack_exports__","updateConfig","updateUserAuthData","_constants__WEBPACK_IMPORTED_MODULE_0__","configInfo","type","C","payload","module","exports","p","loadable","props","Promise","all","e","then","bind","fallback","react_default","defaultLoading","Home","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","configure","readConfigureDone","getRoute","assertThisInitialized","console","log","thisView","axios","get","res","data","updatingConfig","setState","catch","route","billing","config","source","connect","dispatch","combineReducers","arguments","length","undefined","action","userAuthData","consoleMessages","store","next","src_store","initialState","applyMiddleware","thunk","createStore","appReducer","storeProvider","configureStore","sampleData","App","storeFactory","subscribe","localStorage","JSON","stringify","getState","es","home","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.12e60a87.chunk.js","sourcesContent":["const constants = {\n    UPDATE_CONFIG_INFO: \"UPDATE_CONFIG_INFO\",\n    UPDATE_USER_AUTH_DATA: \"UPDATE_USER_AUTH_DATA\",\n}\n\nexport default constants;","import React, { Component } from 'react'\nimport loading_icon from '../../images/home/loading.gif';\nimport './defaultLoading.css';\nclass DefaultLoading extends Component {\n    render() {\n      return <img src={loading_icon} className=\"initial_loading\" alt='' />\n    }\n}\n\nexport default DefaultLoading;","import C from './constants';\n\nexport function updateConfig(configInfo) {\n    return {\n        type: C.UPDATE_CONFIG_INFO,\n        payload: configInfo\n    }\n}\n\nexport function updateUserAuthData(configInfo) {\n    return {\n        type: C.UPDATE_USER_AUTH_DATA,\n        payload: configInfo\n    }\n}\n\n// export function updateUserLoginStatus(status){\n//     if(status)\n//         return { type: C.SET_USER_LOGIN_STATUS }\n//     else\n//         return { type: C.UNSET_USER_LOGIN_STATUS }\n// }","module.exports = __webpack_public_path__ + \"static/media/loading.e275bf6b.gif\";","import React  from 'react';\nimport loadable from '@loadable/component';\nimport DefaultLoading from '../../elements/defaultLoading/defaultLoading';\n\nexport default loadable((props) => import('./billing'), {\n    fallback: <DefaultLoading />,\n});","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport axios from 'axios';\nimport './index.css';\n\nimport Routes from './components/routes/billing';\n\nimport { updateConfig } from './store/actions';\n\nclass Home extends Component {\n    \n    constructor(props){\n        super(props);\n        this.state = {configure:{}, readConfigureDone: false}\n\n        this.getRoute = this.getRoute.bind(this);\n    }\n\n    componentWillMount(){\n        console.log(\"Routes container\");\n\n        var thisView = this;\n        axios.get('configure.json')\n        .then(function(res) {\n            \n            var configure = res.data;\n            thisView.props.updatingConfig(configure);\n            thisView.setState({configure, readConfigureDone:true});\n\n        }).catch(function(res) {\n            console.log(res);\n            console.log('An error occurred configuration');\n        });\n        \n    }\n\n    getRoute(route){\n        \n        if(route === \"billing\")\n            return <Routes config={this.state.configure}/>;\n        else\n            return <Routes config={this.state.configure}/>;\n            \n    }\n\n    render() {\n\n        return ( \n             (this.state.readConfigureDone && this.state.configure.source) ?\n                this.getRoute(this.state.configure.source) : \n                <span></span>  //Dummy return instead of empty in render\n        );\n\n    }\n}\n\nconst mapStateToProps = state => ({\n    config: state.config\n});\n  \nconst mapDispatchToProps = dispatch =>({\n    updatingConfig(data){\n        dispatch(updateConfig(data));\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);\n","import C from './constants';\nimport { combineReducers } from 'redux';\n\nexport const config = (state = {}, action) =>\n    (action.type === C.UPDATE_CONFIG_INFO) ? action.payload : state;\n\nexport const userAuthData = (state = {}, action) =>\n    (action.type === C.UPDATE_USER_AUTH_DATA) ? action.payload : state;\n\n\n// export const userLoginStatus = (state = false, action) => {\n\n//     switch (action.type) {\n\n//         case C.SET_USER_LOGIN_STATUS:\n//             return true\n\n//         case C.UNSET_USER_LOGIN_STATUS:\n//             return false\n\n//         default:\n//             return state\n//     }\n\n// }\n\nexport default combineReducers({\n    config,\n    userAuthData\n    // userData: combineReducers({\n    //     userFetching\n    // })\n})","import appReducer from './reducers';\nimport thunk from 'redux-thunk';\nimport { createStore, applyMiddleware } from 'redux';\n\nconst consoleMessages = store => next => action => {\n    \n    let result;\n    \n    /*console.groupCollapsed(`dispatching action => ${action.type}`)\n    \n    console.log(`\n\n        Data: ${JSON.stringify(action)}\n\n    `)\n    \n    let { userData, errors } = store.getState()\n\n    console.log(`\n\n\t\tuser Data: ${JSON.stringify(userData)}\n\t\terrors: ${errors.length}\n\n\t`)\n    \n    console.groupEnd()*/\n\n    result = next(action);\n    return result;\n}\n\nexport default (initialState = {}) => {\n    return applyMiddleware(thunk, consoleMessages)(createStore)(appReducer, initialState);\n}","import sampleData from './initialState';\n\nvar store = undefined;\n\nexport default {\n    init(configureStore){\n        store = configureStore(sampleData);\n    },\n    getStore(){\n        return store;\n    },\n    getCurrentState(){\n        return store.getState();\n    },\n    getApi(){\n        var currentState = this.getCurrentState();\n        return currentState.config.api;\n    }\n};","import React, { Component } from 'react';\nimport './index.css';\n\nimport Home from './home';\nimport storeFactory from './store';\nimport { Provider } from 'react-redux';\nimport storeProvider from './store/storeProvider';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nclass App extends Component {\n\n    render() {\n\n        storeProvider.init(storeFactory);\n        const store = storeProvider.getStore();\n        const saveState = () =>\n            localStorage[\"redux-store\"] = JSON.stringify(store.getState());\n        store.subscribe(saveState);\n\n        return ( \n            <Provider store = { store } >\n                <Home />\n            </Provider>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}