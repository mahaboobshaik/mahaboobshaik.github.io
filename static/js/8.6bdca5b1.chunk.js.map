{"version":3,"sources":["components/auth/google/index.jsx","components/tools/billing/index.jsx","components/routes/billing/billing.jsx"],"names":["loadable","props","__webpack_require__","e","then","bind","fallback","react_default","a","createElement","defaultLoading","Routes","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","configParamsUpdated","onSuccessFullLogout","assertThisInitialized","console","log","updatingUserAuthData","userAuthData","status","className","react_router_dom","react_router","path","render","billing","to","google_login","clientId","config","buttonText","onLogoutSuccess","google","Component","connect","dispatch","updateUserAuthData"],"mappings":"+MAIeA,cAAS,SAACC,GAAD,OAAWC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAoB,CACnDC,SAAUC,EAAAC,EAAAC,cAACC,EAAA,EAAD,QCDCV,cAAS,SAACC,GAAD,OAAWC,EAAAC,EAAA,GAAAC,KAAAF,EAAAG,KAAA,WAAqB,CACpDC,SAAUC,EAAAC,EAAAC,cAACC,EAAA,EAAD,gBCQRC,cAEF,SAAAA,EAAYV,GAAM,IAAAW,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACdC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,KAAMd,KACDkB,MAAQ,CACTC,qBAAqB,GAGzBR,EAAKS,oBAAsBT,EAAKS,oBAAoBhB,KAAzBQ,OAAAS,EAAA,EAAAT,CAAAD,IANbA,oFAUdW,QAAQC,IAAI,uHAOZT,KAAKd,MAAMwB,qBAAqB,qCAIhC,OACIV,KAAKd,MAAMyB,aAAaC,OACxBpB,EAAAC,EAAAC,cAAA,OAAKmB,UAAU,kBACXrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KACItB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,KACIvB,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAOC,KAAM,IAAKC,OAAQ,SAAC/B,GAAa,OAAOM,EAAAC,EAAAC,cAACwB,EAAYhC,MAC5DM,EAAAC,EAAAC,cAACqB,EAAA,EAAD,CAAUI,GAAG,QAGrB3B,EAAAC,EAAAC,cAAC0B,EAAA,aAAD,CACIC,SAAUrB,KAAKd,MAAMoC,OAAOD,SAC5BE,WAAW,SACXC,gBAAiBxB,KAAKM,uBAK9Bd,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+B,EAAD,cAzCKC,aA0DNC,sBAXS,SAAAvB,GAAK,MAAK,CAC9BkB,OAAQlB,EAAMkB,OACdX,aAAcP,EAAMO,eAGG,SAAAiB,GAAQ,MAAI,CACnClB,qBADmC,SACdE,GACjBgB,EAASC,YAAmBjB,OAIrBe,CAA6C/B","file":"static/js/8.6bdca5b1.chunk.js","sourcesContent":["import React from 'react';\nimport loadable from '@loadable/component';\nimport DefaultLoading from '../../elements/defaultLoading/defaultLoading';\n\nexport default loadable((props) => import('./google'), {\n    fallback: <DefaultLoading />,\n});","import React from 'react';\nimport loadable from '@loadable/component';\nimport DefaultLoading from '../../elements/defaultLoading/defaultLoading';\n\nexport default loadable((props) => import('./billing'), {\n    fallback: <DefaultLoading />,\n});","import React, { Component } from 'react'\n// import axios from 'axios';\nimport { HashRouter as Router, Route, Redirect, Switch } from 'react-router-dom';\n// import { HashRouter as Router } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nimport { GoogleLogout } from 'react-google-login';\n\nimport GoogleLogin from '../../auth/google';\nimport Billing from \"../../tools/billing\";\n\nimport { updateUserAuthData } from '../../../store/actions'; \n\nclass Routes extends Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            configParamsUpdated: false\n        }\n\n        this.onSuccessFullLogout = this.onSuccessFullLogout.bind(this);\n    }\n\n    componentWillMount(){\n        console.log(\"Billing Routes container\");\n    }\n\n    componentDidMount(){\n    }\n\n    onSuccessFullLogout(){\n        this.props.updatingUserAuthData({});\n    }\n\n    render(){\n        return (\n            this.props.userAuthData.status ?\n            <div className=\"main_component\">\n                <Router>\n                    <Switch>\n                        <Route path={\"/\"} render={(props) => {  return <Billing {...props} />}}/>\n                        <Redirect to='/' />\n                    </Switch>\n                </Router>\n                <GoogleLogout\n                    clientId={this.props.config.clientId}\n                    buttonText=\"Logout\"\n                    onLogoutSuccess={this.onSuccessFullLogout}\n                />\n            </div>\n            \n            :\n            <div>\n                <GoogleLogin />\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = state => ({\n    config: state.config,\n    userAuthData: state.userAuthData\n});\n  \nconst mapDispatchToProps = dispatch =>({\n    updatingUserAuthData(status){\n        dispatch(updateUserAuthData(status))\n    }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Routes);"],"sourceRoot":""}